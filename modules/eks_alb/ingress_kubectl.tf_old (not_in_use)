# Copy Yaml file to S3
resource "null_resource" "yaml_to_s3" {
  depends_on = [helm_release.loadbalancer_controller, kubernetes_ingress_class_v1.ingress_class_default]
  provisioner "local-exec" {
    command = var.null_resource_yaml_to_s3_local_exec_command # "sudo -u ubuntu aws s3 cp ../../eks_alb/ingress.yaml s3://eks-netflix-argocd-ubuntu/ingress.yaml"
  }
}

# Copy Yaml file from S3 to instance
resource "null_resource" "s3_to_instance" {
  depends_on = [null_resource.yaml_to_s3]
  provisioner "remote-exec" {
    inline = [
       "ssh -i \"web-ec2.pem\"  ubuntu@${(data.aws_instances.eks_netflix.private_ips[0])} \"${var.null_resource_s3_to_instance_remote_exec_inline}\"" # "sudo -u ubuntu aws cp s3://eks-netflix-argocd-ubuntu/ingress.yaml /home/ubuntu/ingress.yaml"
    ]
  }

  connection {
    type        = var.null_resource_yaml_to_s3_connection_type # "ssh"
    user        = var.null_resource_yaml_to_s3_connection_user # "your_ssh_user"
    private_key = file(var.null_resource_yaml_to_s3_connection_private_key)
    host        = data.aws_instance.bastion.public_ip
  }
}

# Create the alb, target group and related resources
resource "null_resource" "ingress_alb_creation" {
  depends_on = [null_resource.s3_to_instance]
  provisioner "remote-exec" {
    inline = [
       "ssh -i \"web-ec2.pem\"  ubuntu@${(data.aws_instances.eks_netflix.private_ips[0])} \"${var.null_resource_ingress_alb_creation_remote_exec_inline}\"" # "sudo -u ubuntu kubectl apply -f /home/ubuntu/ingress.yaml"
    ]
  }

  connection {
    type        = var.null_resource_ingress_alb_creation_connection_type # "ssh"
    user        = var.null_resource_ingress_alb_creation_connection_user # "your_ssh_user"
    private_key = file(var.null_resource_ingress_alb_creation_connection_private_key)
    host        = data.aws_instance.bastion.public_ip
  }
}